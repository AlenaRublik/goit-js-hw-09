{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACbC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,qBAC9BE,KAAMH,SAASC,cAAc,oBAC7BG,OAAQJ,SAASC,cAAc,uBAkC/B,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEL,WAAUJ,UAEpBU,EAAO,CAAEN,WAAUJ,S,GAEtBA,E,IAzCLJ,EAAKC,KAAKe,iBAAiB,UAI3B,SAA0BC,GACxBA,EAAEC,iBACF,IAAIC,EAAQC,OAAOpB,EAAKI,MAAMiB,OACxBhB,EAAOe,OAAOpB,EAAKK,KAAKgB,OACxBf,EAASc,OAAOpB,EAAKM,OAAOe,OAElC,GAAIF,EAAQ,GAAKd,EAAO,GAAKC,EAAS,EAKpC,YAJAgB,EAAAxB,GAASyB,OAAOC,QACd,kBACA,uBACA,YAIJ,IAAK,IAAIC,EAAI,EAAGA,GAAKnB,EAAQmB,IAC3BlB,EAAckB,EAAGN,GAClBO,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUJ,EAAKuB,EAALvB,MACjBkB,EAAAxB,GAAS8B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAAN1B,EAAM,M,IAEvE2B,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUJ,EAAKuB,EAALvB,MAClBkB,EAAAxB,GAAS8B,OAAOJ,QAAQ,sBAAqCM,OAAftB,EAAS,QAAYsB,OAAN1B,EAAM,M,IAEnEe,GAASd,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = { \nform: document.querySelector('.form'),\ndelay: document.querySelector(\"input[name=delay]\"),\nstep: document.querySelector(\"input[name=step]\"),\namount: document.querySelector(\"input[name=amount]\"),\n}\n\nrefs.form.addEventListener(\"submit\", handleFormSubmit);\n\n// const position = null;\n\nfunction handleFormSubmit(e) {\n  e.preventDefault();\n  let delay = Number(refs.delay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n  \n  if (delay < 0 || step < 0 || amount < 1) {\n    Notiflix.Report.failure(\n      'Incorrect value',\n      'Enter correct values',\n      'Continue');\n    return;\n  }\n  \n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    delay += step;\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n  } else {\n        reject({ position, delay });\n  }\n  }, delay)\n  }) \n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","$parcel$interopDefault","Report","failure","i","then","param","Notify","success","concat","catch"],"version":3,"file":"03-promises.aa7d9c66.js.map"}